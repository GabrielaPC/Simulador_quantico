from sympy import I, Matrix, symbols
from sympy.physics.quantum import TensorProduct
from random import randint,random
from math import *

class simulacao:
    def __init__ (self,n):
        self.n = n
        #global matriz
        self.matriz = self.inicialização()    
        #self.arvore = self.cria_arvore()
        self.cbits = []
        
    def inicialização(self):
        matriz = []
        matriz.append([1])
        for i in range(2**self.n-1):
            matriz.append([0])
            
        return Matrix(matriz)
        
    
    def x(self,k,t=1):
        op = Matrix([1])
        for i in range(self.n):
            if i >= k and i <k+t:
                had = Matrix([[0,1],[1,0]])
                op = TensorProduct(op,had)
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz        
    
    def h(self,k,t=1):
        op = Matrix([1])
        for i in range(self.n):
            if i >= k and i <k+t:
                had = Matrix([[1,1],[1,-1]])
                had = had *2**(-0.5)
                
                op = TensorProduct(op,had)
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz



    def z(self,k,t=1):    
        op = Matrix([1])
        for i in range(self.n):
            if i >= k and i <k+t:
                pz = Matrix([[1,0],[0,-1]])
                op = TensorProduct(op,pz)
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz
 
    def s(self,k,t=1):
        op = Matrix([1])
        for i in range(self.n):
            if i >= k and i <k+t:
                pz = Matrix([[1,0],[0,I]])
                op = TensorProduct(op,pz)
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz
       
     
    def y(self,k,t=1):
        op = Matrix([1])
        for i in range(self.n):
            if i >= k and i <k+t:
                pz = Matrix([[0,-I],[I,0]])
                op = TensorProduct(op,pz)
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz

    def t(self,k,t=1):    
        op = Matrix([1])
        for i in range(self.n):
            if i >= k and i <k+t:
                pz = Matrix([[1,0],[0,e**(I*pi/4)]])
                op = TensorProduct(op,pz)
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz       
    
    def cx(self,k):
        op = Matrix([1])
        for i in range(self.n):
            if i == k:
                cnot = Matrix([[1,0,0,0],[0,1,0,0],[0,0,0,1],[0,0,1,0]])
                op = TensorProduct(op,cnot)
            elif i == (k + 1):
                i = i
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz 
        
    def cz(self,k):
        op = Matrix([1])
        for i in range(self.n):
            if i == k:
                cnot = Matrix([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,-1]])
                op = TensorProduct(op,cnot)
            elif i == (k + 1):
                i = i
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz 

    def cs(self,k):
        op = Matrix([1])
        for i in range(self.n):
            if i == k:
                cnot = Matrix([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,I]])
                op = TensorProduct(op,cnot)
            elif i == (k + 1):
                i = i
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz 
            
    def ccx(self,k):
        op = Matrix([1])
        for i in range(self.n):
            if i == k:
                cnot = Matrix([[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0]])
                op = TensorProduct(op,cnot)
            elif i == (k + 1) or i == (k+2):
                i = i
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz 

    def cswap(self,k):
        op = Matrix([1])
        for i in range(self.n):
            if i == k:
                cnot = Matrix([[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1]])
                op = TensorProduct(op,cnot)
            elif i == (k + 1) or i == (k+2):
                i = i
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz 
    
    
    def swap(self,k):
        op = Matrix([1])
        for i in range(self.n):
            if i == k:
                s = Matrix([[1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]])
                op = TensorProduct(op,s)
            elif i == (k + 1):
                i = i
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz 
    
    def cfs(self,k,t):
        # Condicional Phase Shift
        op = Matrix([1])
        for i in range(self.n):        
            if i == k:
                num = e**((pi*2*I/2**t))    
                s = Matrix([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,num]])
                op = TensorProduct(op,s)
            elif i == (k + 1):
                i = i
            else:
                op = TensorProduct(op,Matrix([[1,0],[0,1]]))
                
        self.matriz = op * self.matriz 
        
    
    def cria_soma(self):
        temp = []
        m = self.matriz
        #print(m)
        for x in m:
                num = x.as_real_imag()
                num_f = (num[0]**2 + num[1]**2)
                temp.append(num_f)                
        N=2**(self.n)
        #print(temp)
        
        soma=[0]*N
        soma[0]=temp[0]
        for i in range(1,N):
            soma[i]= soma[i-1]+temp[i]
        
        #print(soma)
        return soma
    
    def medir(self,b):
        self.cbits = b
    
    
    def tratar(self,k):
        temp = bin(2**self.n + k)[3:]
        temp = temp[::-1]
        num = ''
        for i in self.cbits:
            num = num + temp[self.n-i-1]
        
        return int(num)
    def simular(self,t):
        resultado = {}
        arvore = self.cria_soma()
        N = 2**self.n
        size = 2**len(self.cbits) 
        r = [0]*size
        for _ in range(t):
            p = random()
            #p = .1
            
            # busca binária
            inicio=0
            fim = N-1
            sai = False
            while fim>=inicio and not sai:
                k=(inicio+fim)//2
                #print(k)
                if p < arvore[k]:
                    if p> arvore[k-1]:
                        sai=True
                    fim = k-1
                else :
                    inicio = k + 1
            if self.tratar(k) in resultado:
                resultado[self.tratar(k)] += 1
            else:
                resultado[self.tratar(k)] = 1
            
            #print(self.tratar(k))
            r[int(str(self.tratar(k)),base = 2)] +=1
        
         
        print(resultado)
        print(r)
     
        
        
